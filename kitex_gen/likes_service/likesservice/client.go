// Code generated by Kitex v0.12.3. DO NOT EDIT.

package likesservice

import (
	"context"
	likes_service "github.com/ITu-CloudWeGo/itu_rpc_like/kitex_gen/likes_service"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddLikes(ctx context.Context, Req *likes_service.AddLikesRequest, callOptions ...callopt.Option) (r *likes_service.AddLikesResponse, err error)
	DelLikes(ctx context.Context, Req *likes_service.DelLikesRequest, callOptions ...callopt.Option) (r *likes_service.DelLikesResponse, err error)
	IsLiked(ctx context.Context, Req *likes_service.IsLikedRequest, callOptions ...callopt.Option) (r *likes_service.IsLikedResponse, err error)
	GetLikesCount(ctx context.Context, Req *likes_service.GetLikesCountRequest, callOptions ...callopt.Option) (r *likes_service.GetLikesCountResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kLikesServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLikesServiceClient struct {
	*kClient
}

func (p *kLikesServiceClient) AddLikes(ctx context.Context, Req *likes_service.AddLikesRequest, callOptions ...callopt.Option) (r *likes_service.AddLikesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddLikes(ctx, Req)
}

func (p *kLikesServiceClient) DelLikes(ctx context.Context, Req *likes_service.DelLikesRequest, callOptions ...callopt.Option) (r *likes_service.DelLikesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DelLikes(ctx, Req)
}

func (p *kLikesServiceClient) IsLiked(ctx context.Context, Req *likes_service.IsLikedRequest, callOptions ...callopt.Option) (r *likes_service.IsLikedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsLiked(ctx, Req)
}

func (p *kLikesServiceClient) GetLikesCount(ctx context.Context, Req *likes_service.GetLikesCountRequest, callOptions ...callopt.Option) (r *likes_service.GetLikesCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLikesCount(ctx, Req)
}
