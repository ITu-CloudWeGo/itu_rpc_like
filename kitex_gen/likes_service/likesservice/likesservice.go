// Code generated by Kitex v0.12.3. DO NOT EDIT.

package likesservice

import (
	"context"
	"errors"
	likes_service "github.com/ITu-CloudWeGo/itu_rpc_like/kitex_gen/likes_service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddLikes": kitex.NewMethodInfo(
		addLikesHandler,
		newAddLikesArgs,
		newAddLikesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DelLikes": kitex.NewMethodInfo(
		delLikesHandler,
		newDelLikesArgs,
		newDelLikesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	likesServiceServiceInfo                = NewServiceInfo()
	likesServiceServiceInfoForClient       = NewServiceInfoForClient()
	likesServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return likesServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return likesServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return likesServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LikesService"
	handlerType := (*likes_service.LikesService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "likes",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func addLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(likes_service.AddLikesRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(likes_service.LikesService).AddLikes(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddLikesArgs:
		success, err := handler.(likes_service.LikesService).AddLikes(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddLikesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddLikesArgs() interface{} {
	return &AddLikesArgs{}
}

func newAddLikesResult() interface{} {
	return &AddLikesResult{}
}

type AddLikesArgs struct {
	Req *likes_service.AddLikesRequest
}

func (p *AddLikesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(likes_service.AddLikesRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddLikesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddLikesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddLikesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddLikesArgs) Unmarshal(in []byte) error {
	msg := new(likes_service.AddLikesRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddLikesArgs_Req_DEFAULT *likes_service.AddLikesRequest

func (p *AddLikesArgs) GetReq() *likes_service.AddLikesRequest {
	if !p.IsSetReq() {
		return AddLikesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddLikesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddLikesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddLikesResult struct {
	Success *likes_service.AddLikesResponse
}

var AddLikesResult_Success_DEFAULT *likes_service.AddLikesResponse

func (p *AddLikesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(likes_service.AddLikesResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddLikesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddLikesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddLikesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddLikesResult) Unmarshal(in []byte) error {
	msg := new(likes_service.AddLikesResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddLikesResult) GetSuccess() *likes_service.AddLikesResponse {
	if !p.IsSetSuccess() {
		return AddLikesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddLikesResult) SetSuccess(x interface{}) {
	p.Success = x.(*likes_service.AddLikesResponse)
}

func (p *AddLikesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddLikesResult) GetResult() interface{} {
	return p.Success
}

func delLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(likes_service.DelLikesRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(likes_service.LikesService).DelLikes(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DelLikesArgs:
		success, err := handler.(likes_service.LikesService).DelLikes(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelLikesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDelLikesArgs() interface{} {
	return &DelLikesArgs{}
}

func newDelLikesResult() interface{} {
	return &DelLikesResult{}
}

type DelLikesArgs struct {
	Req *likes_service.DelLikesRequest
}

func (p *DelLikesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(likes_service.DelLikesRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DelLikesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DelLikesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DelLikesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DelLikesArgs) Unmarshal(in []byte) error {
	msg := new(likes_service.DelLikesRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelLikesArgs_Req_DEFAULT *likes_service.DelLikesRequest

func (p *DelLikesArgs) GetReq() *likes_service.DelLikesRequest {
	if !p.IsSetReq() {
		return DelLikesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelLikesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DelLikesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DelLikesResult struct {
	Success *likes_service.DelLikesResponse
}

var DelLikesResult_Success_DEFAULT *likes_service.DelLikesResponse

func (p *DelLikesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(likes_service.DelLikesResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DelLikesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DelLikesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DelLikesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DelLikesResult) Unmarshal(in []byte) error {
	msg := new(likes_service.DelLikesResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelLikesResult) GetSuccess() *likes_service.DelLikesResponse {
	if !p.IsSetSuccess() {
		return DelLikesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelLikesResult) SetSuccess(x interface{}) {
	p.Success = x.(*likes_service.DelLikesResponse)
}

func (p *DelLikesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DelLikesResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddLikes(ctx context.Context, Req *likes_service.AddLikesRequest) (r *likes_service.AddLikesResponse, err error) {
	var _args AddLikesArgs
	_args.Req = Req
	var _result AddLikesResult
	if err = p.c.Call(ctx, "AddLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelLikes(ctx context.Context, Req *likes_service.DelLikesRequest) (r *likes_service.DelLikesResponse, err error) {
	var _args DelLikesArgs
	_args.Req = Req
	var _result DelLikesResult
	if err = p.c.Call(ctx, "DelLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
